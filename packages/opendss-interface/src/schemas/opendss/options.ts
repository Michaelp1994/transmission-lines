import {
    cktModelSchema,
    controlModeOptionSchema,
    earthModelSchema,
    loadModelSchema,
    loadShapeClassSchema,
    modeSchema,
    randomSchema,
    reduceOptionSchema,
} from "@enums/options";
import { z } from "zod";

export const optionsSchema = z.object({
    "%growth": z.number().optional(),
    "%mean": z.number().optional(),
    "%normal": z.number().optional(),
    "%stddev": z.number().optional(),
    activeActor: z.number().optional(),
    actorProgress: z.number().optional(),
    addtype: z.number().optional(),
    algorithm: z.number().optional(),
    allocationfactors: z.number().optional(),
    allowduplicates: z.boolean().optional(),
    autobuslist: z.string().array(),
    basefrequency: z.number().optional(),
    bus: z.number().optional(),
    capkVAR: z.number().optional(),
    capMarkerCode: z.number().optional(),
    capMarkerSize: z.number().optional(),
    casename: z.string(),
    cfactors: z.number().optional(),
    circuit: z.string(),
    cktmodel: cktModelSchema.optional(),
    class: z.number().optional(),
    concatenateReports: z.boolean().optional(),
    controlMode: controlModeOptionSchema.optional(),
    CPU: z.number().optional(),
    daisysize: z.number().optional(),
    datapath: z.string(),
    defaultBaseFrequency: z.number().optional(),
    defaultdaily: z.string(),
    defaultyearly: z.string(),
    demandInterval: z.boolean().optional(),
    dIVerbose: z.boolean().optional(),
    dSSVisualizationTool: z.number().optional(),
    earthModel: earthModelSchema.optional(),
    editor: z.string(),
    element: z.string(),
    emergvmaxpu: z.number().optional(),
    emergvminpu: z.number().optional(),
    eventLogDefault: z.boolean().optional(),
    frequency: z.number().optional(),
    fuseMarkerCode: z.number().optional(),
    fuseMarkerSize: z.number().optional(),
    genkw: z.number().optional(),
    genmult: z.number().optional(),
    genpf: z.number().optional(),
    h: z.string(),
    harmonics: z.string().array(),
    hour: z.number().optional(),
    keepList: z.string().array(),
    keepLoad: z.boolean().optional(),
    lDCurve: z.number().optional(),
    lineTypes: z.number().optional(),
    loadModel: loadModelSchema.optional(),
    loadMult: z.number().optional(),
    loadShapeClass: loadShapeClassSchema.optional(),
    log: z.boolean().optional(),
    longLineCorrection: z.number().optional(),
    lossregs: z.number().optional(),
    lossweight: z.number().optional(),
    markCapacitors: z.boolean().optional(),
    markercode: z.number().optional(),
    markFuses: z.boolean().optional(),
    markPVSystems: z.boolean().optional(),
    markReclosers: z.boolean().optional(),
    markRegulators: z.boolean().optional(),
    markRelays: z.boolean().optional(),
    markStorage: z.boolean().optional(),
    markswitches: z.boolean().optional(),
    marktransformers: z.boolean().optional(),
    maxcontroliter: z.number().optional(),
    maxiterations: z.number().optional(),
    minIterations: z.number().optional(),
    mode: modeSchema.optional(),
    neglectLoadY: z.boolean().optional(),
    nodewidth: z.number().optional(),
    normvmaxpu: z.number().optional(),
    normvminpu: z.number().optional(),
    numActors: z.number().optional(),
    numallociterations: z.number().optional(),
    NUMANodes: z.number().optional(),
    number: z.number().optional(),
    numCores: z.number().optional(),
    numCPUs: z.number().optional(),
    object: z.number().optional(),
    overloadreport: z.boolean().optional(),
    parallel: z.boolean().optional(),
    pricecurve: z.string(),
    pricesignal: z.number().optional(),
    processTime: z.number().optional(),
    pVMarkerCode: z.number().optional(),
    pVMarkerSize: z.number().optional(),
    queryLog: z.boolean().optional(),
    random: randomSchema.optional(),
    recloserMarkerCode: z.number().optional(),
    recloserMarkerSize: z.number().optional(),
    recorder: z.boolean().optional(),
    reduceOption: reduceOptionSchema.optional(),
    registryUpdate: z.boolean().optional(),
    regMarkerCode: z.number().optional(),
    regMarkerSize: z.number().optional(),
    relayMarkerCode: z.number().optional(),
    relayMarkerSize: z.number().optional(),
    sampleEnergyMeters: z.boolean().optional(),
    seasonRating: z.boolean().optional(),
    seasonSignal: z.string(),
    sec: z.number().optional(),
    showExport: z.number().optional(),
    showReports: z.number().optional(),
    stepsize: z.number().optional(),
    stepTime: z.number().optional(),
    storeMarkerCode: z.number().optional(),
    storeMarkerSize: z.number().optional(),
    switchmarkercode: z.number().optional(),
    terminal: z.string(),
    time: z.number().optional().array(),
    tolerance: z.number().optional(),
    totalTime: z.number().optional(),
    tracecontrol: z.boolean().optional(),
    transMarkerCode: z.number().optional(),
    transMarkerSize: z.number().optional(),
    trapezoidal: z.boolean().optional(),
    type: z.number().optional(),
    uEregs: z.number().optional(),
    UEweight: z.number().optional(),
    voltagebases: z.number().optional().array(),
    voltexceptionreport: z.boolean().optional(),
    year: z.number().optional(),
    zmag: z.number().optional(),
    zonelock: z.boolean().optional(),
});

export type OpenDSSOptions = z.infer<typeof optionsSchema>;
