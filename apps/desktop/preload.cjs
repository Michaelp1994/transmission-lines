"use strict";
const electron = require("electron");
var define_process_env_default = {};
const T = "electron-trpc";
function Y(n) {
  const r = /* @__PURE__ */ Object.create(null);
  for (const e in n) {
    const i = n[e];
    r[i] = e;
  }
  return r;
}
const K = {
  /**
  * Invalid JSON was received by the server.
  * An error occurred on the server while parsing the JSON text.
  */
  PARSE_ERROR: -32700,
  /**
  * The JSON sent is not a valid Request object.
  */
  BAD_REQUEST: -32600,
  // Internal JSON-RPC error
  INTERNAL_SERVER_ERROR: -32603,
  NOT_IMPLEMENTED: -32603,
  // Implementation specific errors
  UNAUTHORIZED: -32001,
  FORBIDDEN: -32003,
  NOT_FOUND: -32004,
  METHOD_NOT_SUPPORTED: -32005,
  TIMEOUT: -32008,
  CONFLICT: -32009,
  PRECONDITION_FAILED: -32012,
  PAYLOAD_TOO_LARGE: -32013,
  UNPROCESSABLE_CONTENT: -32022,
  TOO_MANY_REQUESTS: -32029,
  CLIENT_CLOSED_REQUEST: -32099
};
Y(K);
Y(K);
var W, z, x, B, V, J;
typeof window > "u" || "Deno" in window || ((z = (W = globalThis.process) == null ? void 0 : W.env) == null ? void 0 : z.NODE_ENV) === "test" || (B = (x = globalThis.process) == null ? void 0 : x.env) != null && B.JEST_WORKER_ID || (J = (V = globalThis.process) == null ? void 0 : V.env) != null && J.VITEST_WORKER_ID;
function ue(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var D = { exports: {} }, P, H;
function de() {
  if (H)
    return P;
  H = 1;
  var n = 1e3, r = n * 60, e = r * 60, i = e * 24, a = i * 7, C = i * 365.25;
  P = function(t, o) {
    o = o || {};
    var s = typeof t;
    if (s === "string" && t.length > 0)
      return p(t);
    if (s === "number" && isFinite(t))
      return o.long ? c(t) : g(t);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(t)
    );
  };
  function p(t) {
    if (t = String(t), !(t.length > 100)) {
      var o = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        t
      );
      if (o) {
        var s = parseFloat(o[1]), d = (o[2] || "ms").toLowerCase();
        switch (d) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return s * C;
          case "weeks":
          case "week":
          case "w":
            return s * a;
          case "days":
          case "day":
          case "d":
            return s * i;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return s * e;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return s * r;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return s * n;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return s;
          default:
            return;
        }
      }
    }
  }
  function g(t) {
    var o = Math.abs(t);
    return o >= i ? Math.round(t / i) + "d" : o >= e ? Math.round(t / e) + "h" : o >= r ? Math.round(t / r) + "m" : o >= n ? Math.round(t / n) + "s" : t + "ms";
  }
  function c(t) {
    var o = Math.abs(t);
    return o >= i ? u(t, o, i, "day") : o >= e ? u(t, o, e, "hour") : o >= r ? u(t, o, r, "minute") : o >= n ? u(t, o, n, "second") : t + " ms";
  }
  function u(t, o, s, d) {
    var h = o >= s * 1.5;
    return Math.round(t / s) + " " + d + (h ? "s" : "");
  }
  return P;
}
function le(n) {
  e.debug = e, e.default = e, e.coerce = c, e.disable = C, e.enable = a, e.enabled = p, e.humanize = de(), e.destroy = u, Object.keys(n).forEach((t) => {
    e[t] = n[t];
  }), e.names = [], e.skips = [], e.formatters = {};
  function r(t) {
    let o = 0;
    for (let s = 0; s < t.length; s++)
      o = (o << 5) - o + t.charCodeAt(s), o |= 0;
    return e.colors[Math.abs(o) % e.colors.length];
  }
  e.selectColor = r;
  function e(t) {
    let o, s = null, d, h;
    function l(...f) {
      if (!l.enabled)
        return;
      const b = l, O = Number(/* @__PURE__ */ new Date()), G = O - (o || O);
      b.diff = G, b.prev = o, b.curr = O, o = O, f[0] = e.coerce(f[0]), typeof f[0] != "string" && f.unshift("%O");
      let _ = 0;
      f[0] = f[0].replace(/%([a-zA-Z%])/g, (A, q) => {
        if (A === "%%")
          return "%";
        _++;
        const k = e.formatters[q];
        if (typeof k == "function") {
          const X = f[_];
          A = k.call(b, X), f.splice(_, 1), _--;
        }
        return A;
      }), e.formatArgs.call(b, f), (b.log || e.log).apply(b, f);
    }
    return l.namespace = t, l.useColors = e.useColors(), l.color = e.selectColor(t), l.extend = i, l.destroy = e.destroy, Object.defineProperty(l, "enabled", {
      enumerable: true,
      configurable: false,
      get: () => s !== null ? s : (d !== e.namespaces && (d = e.namespaces, h = e.enabled(t)), h),
      set: (f) => {
        s = f;
      }
    }), typeof e.init == "function" && e.init(l), l;
  }
  function i(t, o) {
    const s = e(this.namespace + (typeof o > "u" ? ":" : o) + t);
    return s.log = this.log, s;
  }
  function a(t) {
    e.save(t), e.namespaces = t, e.names = [], e.skips = [];
    let o;
    const s = (typeof t == "string" ? t : "").split(/[\s,]+/), d = s.length;
    for (o = 0; o < d; o++)
      s[o] && (t = s[o].replace(/\*/g, ".*?"), t[0] === "-" ? e.skips.push(new RegExp("^" + t.slice(1) + "$")) : e.names.push(new RegExp("^" + t + "$")));
  }
  function C() {
    const t = [
      ...e.names.map(g),
      ...e.skips.map(g).map((o) => "-" + o)
    ].join(",");
    return e.enable(""), t;
  }
  function p(t) {
    if (t[t.length - 1] === "*")
      return true;
    let o, s;
    for (o = 0, s = e.skips.length; o < s; o++)
      if (e.skips[o].test(t))
        return false;
    for (o = 0, s = e.names.length; o < s; o++)
      if (e.names[o].test(t))
        return true;
    return false;
  }
  function g(t) {
    return t.toString().substring(2, t.toString().length - 2).replace(/\.\*\?$/, "*");
  }
  function c(t) {
    return t instanceof Error ? t.stack || t.message : t;
  }
  function u() {
    console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  }
  return e.enable(e.load()), e;
}
var fe = le;
(function(n, r) {
  r.formatArgs = i, r.save = a, r.load = C, r.useColors = e, r.storage = p(), r.destroy = /* @__PURE__ */ (() => {
    let c = false;
    return () => {
      c || (c = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
    };
  })(), r.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function e() {
    return typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
    typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
    typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function i(c) {
    if (c[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + c[0] + (this.useColors ? "%c " : " ") + "+" + n.exports.humanize(this.diff), !this.useColors)
      return;
    const u = "color: " + this.color;
    c.splice(1, 0, u, "color: inherit");
    let t = 0, o = 0;
    c[0].replace(/%[a-zA-Z%]/g, (s) => {
      s !== "%%" && (t++, s === "%c" && (o = t));
    }), c.splice(o, 0, u);
  }
  r.log = console.debug || console.log || (() => {
  });
  function a(c) {
    try {
      c ? r.storage.setItem("debug", c) : r.storage.removeItem("debug");
    } catch {
    }
  }
  function C() {
    let c;
    try {
      c = r.storage.getItem("debug");
    } catch {
    }
    return !c && typeof process < "u" && "env" in process && (c = define_process_env_default.DEBUG), c;
  }
  function p() {
    try {
      return localStorage;
    } catch {
    }
  }
  n.exports = fe(r);
  const { formatters: g } = n.exports;
  g.j = function(c) {
    try {
      return JSON.stringify(c);
    } catch (u) {
      return "[UnexpectedJSONParseError]: " + u.message;
    }
  };
})(D, D.exports);
var Ce = D.exports;
const Q = /* @__PURE__ */ ue(Ce);
Q("electron-trpc:main:handleIPCMessage");
Q("electron-trpc:main:IPCHandler");
const ye = () => {
  const n = {
    sendMessage: (r) => electron.ipcRenderer.send(T, r),
    onMessage: (r) => electron.ipcRenderer.on(T, (e, i) => r(i))
  };
  electron.contextBridge.exposeInMainWorld("electronTRPC", n);
};
process.once("loaded", async () => {
  ye();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5janMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9lbGVjdHJvbi10cnBjL2Rpc3QvbWFpbi5tanMiLCIuLi9zcmMvcHJlbG9hZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUyA9IChuLCByLCBlKSA9PiB7XG4gIGlmICghci5oYXMobikpXG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IFwiICsgZSk7XG59O1xudmFyIEYgPSAobiwgciwgZSkgPT4gKFMobiwgciwgXCJyZWFkIGZyb20gcHJpdmF0ZSBmaWVsZFwiKSwgZSA/IGUuY2FsbChuKSA6IHIuZ2V0KG4pKSwgbSA9IChuLCByLCBlKSA9PiB7XG4gIGlmIChyLmhhcyhuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIHRoZSBzYW1lIHByaXZhdGUgbWVtYmVyIG1vcmUgdGhhbiBvbmNlXCIpO1xuICByIGluc3RhbmNlb2YgV2Vha1NldCA/IHIuYWRkKG4pIDogci5zZXQobiwgZSk7XG59LCBMID0gKG4sIHIsIGUsIGkpID0+IChTKG4sIHIsIFwid3JpdGUgdG8gcHJpdmF0ZSBmaWVsZFwiKSwgaSA/IGkuY2FsbChuLCBlKSA6IHIuc2V0KG4sIGUpLCBlKTtcbnZhciB2ID0gKG4sIHIsIGUpID0+IChTKG4sIHIsIFwiYWNjZXNzIHByaXZhdGUgbWV0aG9kXCIpLCBlKTtcbmltcG9ydCB7IGlwY01haW4gYXMgZWUsIGNvbnRleHRCcmlkZ2UgYXMgcmUsIGlwY1JlbmRlcmVyIGFzIFUgfSBmcm9tIFwiZWxlY3Ryb25cIjtcbmNvbnN0IFQgPSBcImVsZWN0cm9uLXRycGNcIjtcbmZ1bmN0aW9uIG5lKG4pIHtcbiAgcmV0dXJuICEhbiAmJiAhQXJyYXkuaXNBcnJheShuKSAmJiB0eXBlb2YgbiA9PSBcIm9iamVjdFwiO1xufVxuY2xhc3MgdGUgZXh0ZW5kcyBFcnJvciB7XG59XG5mdW5jdGlvbiBvZShuKSB7XG4gIGlmIChuIGluc3RhbmNlb2YgRXJyb3IpXG4gICAgcmV0dXJuIG47XG4gIGNvbnN0IHIgPSB0eXBlb2YgbjtcbiAgaWYgKCEociA9PT0gXCJ1bmRlZmluZWRcIiB8fCByID09PSBcImZ1bmN0aW9uXCIgfHwgbiA9PT0gbnVsbCkpIHtcbiAgICBpZiAociAhPT0gXCJvYmplY3RcIilcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoU3RyaW5nKG4pKTtcbiAgICBpZiAobmUobikpIHtcbiAgICAgIGNvbnN0IGUgPSBuZXcgdGUoKTtcbiAgICAgIGZvciAoY29uc3QgaSBpbiBuKVxuICAgICAgICBlW2ldID0gbltpXTtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgSSBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Iocikge1xuICAgIGNvbnN0IGUgPSBvZShyLmNhdXNlKSwgaSA9IHIubWVzc2FnZSA/PyAoZSA9PSBudWxsID8gdm9pZCAwIDogZS5tZXNzYWdlKSA/PyByLmNvZGU7XG4gICAgc3VwZXIoaSwge1xuICAgICAgY2F1c2U6IGVcbiAgICB9KSwgdGhpcy5jb2RlID0gci5jb2RlLCB0aGlzLm5hbWUgPSBcIlRSUENFcnJvclwiLCB0aGlzLmNhdXNlIHx8ICh0aGlzLmNhdXNlID0gZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIFkobikge1xuICBjb25zdCByID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvciAoY29uc3QgZSBpbiBuKSB7XG4gICAgY29uc3QgaSA9IG5bZV07XG4gICAgcltpXSA9IGU7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5jb25zdCBLID0ge1xuICAvKipcbiAgKiBJbnZhbGlkIEpTT04gd2FzIHJlY2VpdmVkIGJ5IHRoZSBzZXJ2ZXIuXG4gICogQW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHNlcnZlciB3aGlsZSBwYXJzaW5nIHRoZSBKU09OIHRleHQuXG4gICovXG4gIFBBUlNFX0VSUk9SOiAtMzI3MDAsXG4gIC8qKlxuICAqIFRoZSBKU09OIHNlbnQgaXMgbm90IGEgdmFsaWQgUmVxdWVzdCBvYmplY3QuXG4gICovXG4gIEJBRF9SRVFVRVNUOiAtMzI2MDAsXG4gIC8vIEludGVybmFsIEpTT04tUlBDIGVycm9yXG4gIElOVEVSTkFMX1NFUlZFUl9FUlJPUjogLTMyNjAzLFxuICBOT1RfSU1QTEVNRU5URUQ6IC0zMjYwMyxcbiAgLy8gSW1wbGVtZW50YXRpb24gc3BlY2lmaWMgZXJyb3JzXG4gIFVOQVVUSE9SSVpFRDogLTMyMDAxLFxuICBGT1JCSURERU46IC0zMjAwMyxcbiAgTk9UX0ZPVU5EOiAtMzIwMDQsXG4gIE1FVEhPRF9OT1RfU1VQUE9SVEVEOiAtMzIwMDUsXG4gIFRJTUVPVVQ6IC0zMjAwOCxcbiAgQ09ORkxJQ1Q6IC0zMjAwOSxcbiAgUFJFQ09ORElUSU9OX0ZBSUxFRDogLTMyMDEyLFxuICBQQVlMT0FEX1RPT19MQVJHRTogLTMyMDEzLFxuICBVTlBST0NFU1NBQkxFX0NPTlRFTlQ6IC0zMjAyMixcbiAgVE9PX01BTllfUkVRVUVTVFM6IC0zMjAyOSxcbiAgQ0xJRU5UX0NMT1NFRF9SRVFVRVNUOiAtMzIwOTlcbn07XG5ZKEspO1xuWShLKTtcbmZ1bmN0aW9uIHNlKG4pIHtcbiAgdmFyIGE7XG4gIGNvbnN0IHsgdHlwZTogciwgcGF0aDogZSB9ID0gbjtcbiAgaWYgKCEoZSBpbiBuLnByb2NlZHVyZXMpIHx8ICEoKGEgPSBuLnByb2NlZHVyZXNbZV0pICE9IG51bGwgJiYgYS5fZGVmW3JdKSlcbiAgICB0aHJvdyBuZXcgSSh7XG4gICAgICBjb2RlOiBcIk5PVF9GT1VORFwiLFxuICAgICAgbWVzc2FnZTogYE5vIFwiJHtyfVwiLXByb2NlZHVyZSBvbiBwYXRoIFwiJHtlfVwiYFxuICAgIH0pO1xuICBjb25zdCBpID0gbi5wcm9jZWR1cmVzW2VdO1xuICByZXR1cm4gaShuKTtcbn1cbnZhciBXLCB6LCB4LCBCLCBWLCBKO1xudHlwZW9mIHdpbmRvdyA+IFwidVwiIHx8IFwiRGVub1wiIGluIHdpbmRvdyB8fCAoKHogPSAoVyA9IGdsb2JhbFRoaXMucHJvY2VzcykgPT0gbnVsbCA/IHZvaWQgMCA6IFcuZW52KSA9PSBudWxsID8gdm9pZCAwIDogei5OT0RFX0VOVikgPT09IFwidGVzdFwiIHx8IChCID0gKHggPSBnbG9iYWxUaGlzLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiB4LmVudikgIT0gbnVsbCAmJiBCLkpFU1RfV09SS0VSX0lEIHx8IChKID0gKFYgPSBnbG9iYWxUaGlzLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBWLmVudikgIT0gbnVsbCAmJiBKLlZJVEVTVF9XT1JLRVJfSUQ7XG5mdW5jdGlvbiBpZShuKSB7XG4gIHJldHVybiB0eXBlb2YgbiA9PSBcIm9iamVjdFwiICYmIG4gIT09IG51bGwgJiYgXCJzdWJzY3JpYmVcIiBpbiBuO1xufVxuZnVuY3Rpb24gJChuLCByKSB7XG4gIHJldHVybiBcImVycm9yXCIgaW4gciA/IHtcbiAgICAuLi5yLFxuICAgIGVycm9yOiBuLnRyYW5zZm9ybWVyLm91dHB1dC5zZXJpYWxpemUoci5lcnJvcilcbiAgfSA6IFwiZGF0YVwiIGluIHIucmVzdWx0ID8ge1xuICAgIC4uLnIsXG4gICAgcmVzdWx0OiB7XG4gICAgICAuLi5yLnJlc3VsdCxcbiAgICAgIGRhdGE6IG4udHJhbnNmb3JtZXIub3V0cHV0LnNlcmlhbGl6ZShyLnJlc3VsdC5kYXRhKVxuICAgIH1cbiAgfSA6IHI7XG59XG5mdW5jdGlvbiBjZShuLCByKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHIpID8gci5tYXAoKGUpID0+ICQobiwgZSkpIDogJChuLCByKTtcbn1cbmZ1bmN0aW9uIGoobikge1xuICBpZiAobiBpbnN0YW5jZW9mIEkpXG4gICAgcmV0dXJuIG47XG4gIGNvbnN0IHIgPSBhZShuKSwgZSA9IG5ldyBJKHtcbiAgICBjb2RlOiBcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiLFxuICAgIGNhdXNlOiByLFxuICAgIG1lc3NhZ2U6IHIubWVzc2FnZVxuICB9KTtcbiAgcmV0dXJuIGUuc3RhY2sgPSByLnN0YWNrLCBlO1xufVxuZnVuY3Rpb24gYWUobikge1xuICByZXR1cm4gbiBpbnN0YW5jZW9mIEVycm9yID8gbiA6IHR5cGVvZiBuID09IFwic3RyaW5nXCIgPyBuZXcgRXJyb3IobikgOiBuZXcgRXJyb3IoXCJVbmtub3duIGVycm9yXCIpO1xufVxuZnVuY3Rpb24gdWUobikge1xuICByZXR1cm4gbiAmJiBuLl9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sIFwiZGVmYXVsdFwiKSA/IG4uZGVmYXVsdCA6IG47XG59XG52YXIgRCA9IHsgZXhwb3J0czoge30gfSwgUCwgSDtcbmZ1bmN0aW9uIGRlKCkge1xuICBpZiAoSClcbiAgICByZXR1cm4gUDtcbiAgSCA9IDE7XG4gIHZhciBuID0gMWUzLCByID0gbiAqIDYwLCBlID0gciAqIDYwLCBpID0gZSAqIDI0LCBhID0gaSAqIDcsIEMgPSBpICogMzY1LjI1O1xuICBQID0gZnVuY3Rpb24odCwgbykge1xuICAgIG8gPSBvIHx8IHt9O1xuICAgIHZhciBzID0gdHlwZW9mIHQ7XG4gICAgaWYgKHMgPT09IFwic3RyaW5nXCIgJiYgdC5sZW5ndGggPiAwKVxuICAgICAgcmV0dXJuIHAodCk7XG4gICAgaWYgKHMgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUodCkpXG4gICAgICByZXR1cm4gby5sb25nID8gYyh0KSA6IGcodCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJ2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPVwiICsgSlNPTi5zdHJpbmdpZnkodClcbiAgICApO1xuICB9O1xuICBmdW5jdGlvbiBwKHQpIHtcbiAgICBpZiAodCA9IFN0cmluZyh0KSwgISh0Lmxlbmd0aCA+IDEwMCkpIHtcbiAgICAgIHZhciBvID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgICAgICB0XG4gICAgICApO1xuICAgICAgaWYgKG8pIHtcbiAgICAgICAgdmFyIHMgPSBwYXJzZUZsb2F0KG9bMV0pLCBkID0gKG9bMl0gfHwgXCJtc1wiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBzd2l0Y2ggKGQpIHtcbiAgICAgICAgICBjYXNlIFwieWVhcnNcIjpcbiAgICAgICAgICBjYXNlIFwieWVhclwiOlxuICAgICAgICAgIGNhc2UgXCJ5cnNcIjpcbiAgICAgICAgICBjYXNlIFwieXJcIjpcbiAgICAgICAgICBjYXNlIFwieVwiOlxuICAgICAgICAgICAgcmV0dXJuIHMgKiBDO1xuICAgICAgICAgIGNhc2UgXCJ3ZWVrc1wiOlxuICAgICAgICAgIGNhc2UgXCJ3ZWVrXCI6XG4gICAgICAgICAgY2FzZSBcIndcIjpcbiAgICAgICAgICAgIHJldHVybiBzICogYTtcbiAgICAgICAgICBjYXNlIFwiZGF5c1wiOlxuICAgICAgICAgIGNhc2UgXCJkYXlcIjpcbiAgICAgICAgICBjYXNlIFwiZFwiOlxuICAgICAgICAgICAgcmV0dXJuIHMgKiBpO1xuICAgICAgICAgIGNhc2UgXCJob3Vyc1wiOlxuICAgICAgICAgIGNhc2UgXCJob3VyXCI6XG4gICAgICAgICAgY2FzZSBcImhyc1wiOlxuICAgICAgICAgIGNhc2UgXCJoclwiOlxuICAgICAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgICAgICByZXR1cm4gcyAqIGU7XG4gICAgICAgICAgY2FzZSBcIm1pbnV0ZXNcIjpcbiAgICAgICAgICBjYXNlIFwibWludXRlXCI6XG4gICAgICAgICAgY2FzZSBcIm1pbnNcIjpcbiAgICAgICAgICBjYXNlIFwibWluXCI6XG4gICAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICAgIHJldHVybiBzICogcjtcbiAgICAgICAgICBjYXNlIFwic2Vjb25kc1wiOlxuICAgICAgICAgIGNhc2UgXCJzZWNvbmRcIjpcbiAgICAgICAgICBjYXNlIFwic2Vjc1wiOlxuICAgICAgICAgIGNhc2UgXCJzZWNcIjpcbiAgICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgICAgcmV0dXJuIHMgKiBuO1xuICAgICAgICAgIGNhc2UgXCJtaWxsaXNlY29uZHNcIjpcbiAgICAgICAgICBjYXNlIFwibWlsbGlzZWNvbmRcIjpcbiAgICAgICAgICBjYXNlIFwibXNlY3NcIjpcbiAgICAgICAgICBjYXNlIFwibXNlY1wiOlxuICAgICAgICAgIGNhc2UgXCJtc1wiOlxuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnKHQpIHtcbiAgICB2YXIgbyA9IE1hdGguYWJzKHQpO1xuICAgIHJldHVybiBvID49IGkgPyBNYXRoLnJvdW5kKHQgLyBpKSArIFwiZFwiIDogbyA+PSBlID8gTWF0aC5yb3VuZCh0IC8gZSkgKyBcImhcIiA6IG8gPj0gciA/IE1hdGgucm91bmQodCAvIHIpICsgXCJtXCIgOiBvID49IG4gPyBNYXRoLnJvdW5kKHQgLyBuKSArIFwic1wiIDogdCArIFwibXNcIjtcbiAgfVxuICBmdW5jdGlvbiBjKHQpIHtcbiAgICB2YXIgbyA9IE1hdGguYWJzKHQpO1xuICAgIHJldHVybiBvID49IGkgPyB1KHQsIG8sIGksIFwiZGF5XCIpIDogbyA+PSBlID8gdSh0LCBvLCBlLCBcImhvdXJcIikgOiBvID49IHIgPyB1KHQsIG8sIHIsIFwibWludXRlXCIpIDogbyA+PSBuID8gdSh0LCBvLCBuLCBcInNlY29uZFwiKSA6IHQgKyBcIiBtc1wiO1xuICB9XG4gIGZ1bmN0aW9uIHUodCwgbywgcywgZCkge1xuICAgIHZhciBoID0gbyA+PSBzICogMS41O1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHQgLyBzKSArIFwiIFwiICsgZCArIChoID8gXCJzXCIgOiBcIlwiKTtcbiAgfVxuICByZXR1cm4gUDtcbn1cbmZ1bmN0aW9uIGxlKG4pIHtcbiAgZS5kZWJ1ZyA9IGUsIGUuZGVmYXVsdCA9IGUsIGUuY29lcmNlID0gYywgZS5kaXNhYmxlID0gQywgZS5lbmFibGUgPSBhLCBlLmVuYWJsZWQgPSBwLCBlLmh1bWFuaXplID0gZGUoKSwgZS5kZXN0cm95ID0gdSwgT2JqZWN0LmtleXMobikuZm9yRWFjaCgodCkgPT4ge1xuICAgIGVbdF0gPSBuW3RdO1xuICB9KSwgZS5uYW1lcyA9IFtdLCBlLnNraXBzID0gW10sIGUuZm9ybWF0dGVycyA9IHt9O1xuICBmdW5jdGlvbiByKHQpIHtcbiAgICBsZXQgbyA9IDA7XG4gICAgZm9yIChsZXQgcyA9IDA7IHMgPCB0Lmxlbmd0aDsgcysrKVxuICAgICAgbyA9IChvIDw8IDUpIC0gbyArIHQuY2hhckNvZGVBdChzKSwgbyB8PSAwO1xuICAgIHJldHVybiBlLmNvbG9yc1tNYXRoLmFicyhvKSAlIGUuY29sb3JzLmxlbmd0aF07XG4gIH1cbiAgZS5zZWxlY3RDb2xvciA9IHI7XG4gIGZ1bmN0aW9uIGUodCkge1xuICAgIGxldCBvLCBzID0gbnVsbCwgZCwgaDtcbiAgICBmdW5jdGlvbiBsKC4uLmYpIHtcbiAgICAgIGlmICghbC5lbmFibGVkKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBiID0gbCwgTyA9IE51bWJlcigvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSksIEcgPSBPIC0gKG8gfHwgTyk7XG4gICAgICBiLmRpZmYgPSBHLCBiLnByZXYgPSBvLCBiLmN1cnIgPSBPLCBvID0gTywgZlswXSA9IGUuY29lcmNlKGZbMF0pLCB0eXBlb2YgZlswXSAhPSBcInN0cmluZ1wiICYmIGYudW5zaGlmdChcIiVPXCIpO1xuICAgICAgbGV0IF8gPSAwO1xuICAgICAgZlswXSA9IGZbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChBLCBxKSA9PiB7XG4gICAgICAgIGlmIChBID09PSBcIiUlXCIpXG4gICAgICAgICAgcmV0dXJuIFwiJVwiO1xuICAgICAgICBfKys7XG4gICAgICAgIGNvbnN0IGsgPSBlLmZvcm1hdHRlcnNbcV07XG4gICAgICAgIGlmICh0eXBlb2YgayA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zdCBYID0gZltfXTtcbiAgICAgICAgICBBID0gay5jYWxsKGIsIFgpLCBmLnNwbGljZShfLCAxKSwgXy0tO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBO1xuICAgICAgfSksIGUuZm9ybWF0QXJncy5jYWxsKGIsIGYpLCAoYi5sb2cgfHwgZS5sb2cpLmFwcGx5KGIsIGYpO1xuICAgIH1cbiAgICByZXR1cm4gbC5uYW1lc3BhY2UgPSB0LCBsLnVzZUNvbG9ycyA9IGUudXNlQ29sb3JzKCksIGwuY29sb3IgPSBlLnNlbGVjdENvbG9yKHQpLCBsLmV4dGVuZCA9IGksIGwuZGVzdHJveSA9IGUuZGVzdHJveSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGwsIFwiZW5hYmxlZFwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogITEsXG4gICAgICBnZXQ6ICgpID0+IHMgIT09IG51bGwgPyBzIDogKGQgIT09IGUubmFtZXNwYWNlcyAmJiAoZCA9IGUubmFtZXNwYWNlcywgaCA9IGUuZW5hYmxlZCh0KSksIGgpLFxuICAgICAgc2V0OiAoZikgPT4ge1xuICAgICAgICBzID0gZjtcbiAgICAgIH1cbiAgICB9KSwgdHlwZW9mIGUuaW5pdCA9PSBcImZ1bmN0aW9uXCIgJiYgZS5pbml0KGwpLCBsO1xuICB9XG4gIGZ1bmN0aW9uIGkodCwgbykge1xuICAgIGNvbnN0IHMgPSBlKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBvID4gXCJ1XCIgPyBcIjpcIiA6IG8pICsgdCk7XG4gICAgcmV0dXJuIHMubG9nID0gdGhpcy5sb2csIHM7XG4gIH1cbiAgZnVuY3Rpb24gYSh0KSB7XG4gICAgZS5zYXZlKHQpLCBlLm5hbWVzcGFjZXMgPSB0LCBlLm5hbWVzID0gW10sIGUuc2tpcHMgPSBbXTtcbiAgICBsZXQgbztcbiAgICBjb25zdCBzID0gKHR5cGVvZiB0ID09IFwic3RyaW5nXCIgPyB0IDogXCJcIikuc3BsaXQoL1tcXHMsXSsvKSwgZCA9IHMubGVuZ3RoO1xuICAgIGZvciAobyA9IDA7IG8gPCBkOyBvKyspXG4gICAgICBzW29dICYmICh0ID0gc1tvXS5yZXBsYWNlKC9cXCovZywgXCIuKj9cIiksIHRbMF0gPT09IFwiLVwiID8gZS5za2lwcy5wdXNoKG5ldyBSZWdFeHAoXCJeXCIgKyB0LnNsaWNlKDEpICsgXCIkXCIpKSA6IGUubmFtZXMucHVzaChuZXcgUmVnRXhwKFwiXlwiICsgdCArIFwiJFwiKSkpO1xuICB9XG4gIGZ1bmN0aW9uIEMoKSB7XG4gICAgY29uc3QgdCA9IFtcbiAgICAgIC4uLmUubmFtZXMubWFwKGcpLFxuICAgICAgLi4uZS5za2lwcy5tYXAoZykubWFwKChvKSA9PiBcIi1cIiArIG8pXG4gICAgXS5qb2luKFwiLFwiKTtcbiAgICByZXR1cm4gZS5lbmFibGUoXCJcIiksIHQ7XG4gIH1cbiAgZnVuY3Rpb24gcCh0KSB7XG4gICAgaWYgKHRbdC5sZW5ndGggLSAxXSA9PT0gXCIqXCIpXG4gICAgICByZXR1cm4gITA7XG4gICAgbGV0IG8sIHM7XG4gICAgZm9yIChvID0gMCwgcyA9IGUuc2tpcHMubGVuZ3RoOyBvIDwgczsgbysrKVxuICAgICAgaWYgKGUuc2tpcHNbb10udGVzdCh0KSlcbiAgICAgICAgcmV0dXJuICExO1xuICAgIGZvciAobyA9IDAsIHMgPSBlLm5hbWVzLmxlbmd0aDsgbyA8IHM7IG8rKylcbiAgICAgIGlmIChlLm5hbWVzW29dLnRlc3QodCkpXG4gICAgICAgIHJldHVybiAhMDtcbiAgICByZXR1cm4gITE7XG4gIH1cbiAgZnVuY3Rpb24gZyh0KSB7XG4gICAgcmV0dXJuIHQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiwgdC50b1N0cmluZygpLmxlbmd0aCAtIDIpLnJlcGxhY2UoL1xcLlxcKlxcPyQvLCBcIipcIik7XG4gIH1cbiAgZnVuY3Rpb24gYyh0KSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBFcnJvciA/IHQuc3RhY2sgfHwgdC5tZXNzYWdlIDogdDtcbiAgfVxuICBmdW5jdGlvbiB1KCkge1xuICAgIGNvbnNvbGUud2FybihcIkluc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC5cIik7XG4gIH1cbiAgcmV0dXJuIGUuZW5hYmxlKGUubG9hZCgpKSwgZTtcbn1cbnZhciBmZSA9IGxlO1xuKGZ1bmN0aW9uKG4sIHIpIHtcbiAgci5mb3JtYXRBcmdzID0gaSwgci5zYXZlID0gYSwgci5sb2FkID0gQywgci51c2VDb2xvcnMgPSBlLCByLnN0b3JhZ2UgPSBwKCksIHIuZGVzdHJveSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4ge1xuICAgIGxldCBjID0gITE7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGMgfHwgKGMgPSAhMCwgY29uc29sZS53YXJuKFwiSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLlwiKSk7XG4gICAgfTtcbiAgfSkoKSwgci5jb2xvcnMgPSBbXG4gICAgXCIjMDAwMENDXCIsXG4gICAgXCIjMDAwMEZGXCIsXG4gICAgXCIjMDAzM0NDXCIsXG4gICAgXCIjMDAzM0ZGXCIsXG4gICAgXCIjMDA2NkNDXCIsXG4gICAgXCIjMDA2NkZGXCIsXG4gICAgXCIjMDA5OUNDXCIsXG4gICAgXCIjMDA5OUZGXCIsXG4gICAgXCIjMDBDQzAwXCIsXG4gICAgXCIjMDBDQzMzXCIsXG4gICAgXCIjMDBDQzY2XCIsXG4gICAgXCIjMDBDQzk5XCIsXG4gICAgXCIjMDBDQ0NDXCIsXG4gICAgXCIjMDBDQ0ZGXCIsXG4gICAgXCIjMzMwMENDXCIsXG4gICAgXCIjMzMwMEZGXCIsXG4gICAgXCIjMzMzM0NDXCIsXG4gICAgXCIjMzMzM0ZGXCIsXG4gICAgXCIjMzM2NkNDXCIsXG4gICAgXCIjMzM2NkZGXCIsXG4gICAgXCIjMzM5OUNDXCIsXG4gICAgXCIjMzM5OUZGXCIsXG4gICAgXCIjMzNDQzAwXCIsXG4gICAgXCIjMzNDQzMzXCIsXG4gICAgXCIjMzNDQzY2XCIsXG4gICAgXCIjMzNDQzk5XCIsXG4gICAgXCIjMzNDQ0NDXCIsXG4gICAgXCIjMzNDQ0ZGXCIsXG4gICAgXCIjNjYwMENDXCIsXG4gICAgXCIjNjYwMEZGXCIsXG4gICAgXCIjNjYzM0NDXCIsXG4gICAgXCIjNjYzM0ZGXCIsXG4gICAgXCIjNjZDQzAwXCIsXG4gICAgXCIjNjZDQzMzXCIsXG4gICAgXCIjOTkwMENDXCIsXG4gICAgXCIjOTkwMEZGXCIsXG4gICAgXCIjOTkzM0NDXCIsXG4gICAgXCIjOTkzM0ZGXCIsXG4gICAgXCIjOTlDQzAwXCIsXG4gICAgXCIjOTlDQzMzXCIsXG4gICAgXCIjQ0MwMDAwXCIsXG4gICAgXCIjQ0MwMDMzXCIsXG4gICAgXCIjQ0MwMDY2XCIsXG4gICAgXCIjQ0MwMDk5XCIsXG4gICAgXCIjQ0MwMENDXCIsXG4gICAgXCIjQ0MwMEZGXCIsXG4gICAgXCIjQ0MzMzAwXCIsXG4gICAgXCIjQ0MzMzMzXCIsXG4gICAgXCIjQ0MzMzY2XCIsXG4gICAgXCIjQ0MzMzk5XCIsXG4gICAgXCIjQ0MzM0NDXCIsXG4gICAgXCIjQ0MzM0ZGXCIsXG4gICAgXCIjQ0M2NjAwXCIsXG4gICAgXCIjQ0M2NjMzXCIsXG4gICAgXCIjQ0M5OTAwXCIsXG4gICAgXCIjQ0M5OTMzXCIsXG4gICAgXCIjQ0NDQzAwXCIsXG4gICAgXCIjQ0NDQzMzXCIsXG4gICAgXCIjRkYwMDAwXCIsXG4gICAgXCIjRkYwMDMzXCIsXG4gICAgXCIjRkYwMDY2XCIsXG4gICAgXCIjRkYwMDk5XCIsXG4gICAgXCIjRkYwMENDXCIsXG4gICAgXCIjRkYwMEZGXCIsXG4gICAgXCIjRkYzMzAwXCIsXG4gICAgXCIjRkYzMzMzXCIsXG4gICAgXCIjRkYzMzY2XCIsXG4gICAgXCIjRkYzMzk5XCIsXG4gICAgXCIjRkYzM0NDXCIsXG4gICAgXCIjRkYzM0ZGXCIsXG4gICAgXCIjRkY2NjAwXCIsXG4gICAgXCIjRkY2NjMzXCIsXG4gICAgXCIjRkY5OTAwXCIsXG4gICAgXCIjRkY5OTMzXCIsXG4gICAgXCIjRkZDQzAwXCIsXG4gICAgXCIjRkZDQzMzXCJcbiAgXTtcbiAgZnVuY3Rpb24gZSgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyA8IFwidVwiICYmIHdpbmRvdy5wcm9jZXNzICYmICh3aW5kb3cucHJvY2Vzcy50eXBlID09PSBcInJlbmRlcmVyXCIgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSA/ICEwIDogdHlwZW9mIG5hdmlnYXRvciA8IFwidVwiICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pID8gITEgOiB0eXBlb2YgZG9jdW1lbnQgPCBcInVcIiAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlIHx8IC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICB0eXBlb2Ygd2luZG93IDwgXCJ1XCIgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgd2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSB8fCAvLyBJcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICB0eXBlb2YgbmF2aWdhdG9yIDwgXCJ1XCIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSB8fCAvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgdHlwZW9mIG5hdmlnYXRvciA8IFwidVwiICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pO1xuICB9XG4gIGZ1bmN0aW9uIGkoYykge1xuICAgIGlmIChjWzBdID0gKHRoaXMudXNlQ29sb3JzID8gXCIlY1wiIDogXCJcIikgKyB0aGlzLm5hbWVzcGFjZSArICh0aGlzLnVzZUNvbG9ycyA/IFwiICVjXCIgOiBcIiBcIikgKyBjWzBdICsgKHRoaXMudXNlQ29sb3JzID8gXCIlYyBcIiA6IFwiIFwiKSArIFwiK1wiICsgbi5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZiksICF0aGlzLnVzZUNvbG9ycylcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB1ID0gXCJjb2xvcjogXCIgKyB0aGlzLmNvbG9yO1xuICAgIGMuc3BsaWNlKDEsIDAsIHUsIFwiY29sb3I6IGluaGVyaXRcIik7XG4gICAgbGV0IHQgPSAwLCBvID0gMDtcbiAgICBjWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgKHMpID0+IHtcbiAgICAgIHMgIT09IFwiJSVcIiAmJiAodCsrLCBzID09PSBcIiVjXCIgJiYgKG8gPSB0KSk7XG4gICAgfSksIGMuc3BsaWNlKG8sIDAsIHUpO1xuICB9XG4gIHIubG9nID0gY29uc29sZS5kZWJ1ZyB8fCBjb25zb2xlLmxvZyB8fCAoKCkgPT4ge1xuICB9KTtcbiAgZnVuY3Rpb24gYShjKSB7XG4gICAgdHJ5IHtcbiAgICAgIGMgPyByLnN0b3JhZ2Uuc2V0SXRlbShcImRlYnVnXCIsIGMpIDogci5zdG9yYWdlLnJlbW92ZUl0ZW0oXCJkZWJ1Z1wiKTtcbiAgICB9IGNhdGNoIHtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gQygpIHtcbiAgICBsZXQgYztcbiAgICB0cnkge1xuICAgICAgYyA9IHIuc3RvcmFnZS5nZXRJdGVtKFwiZGVidWdcIik7XG4gICAgfSBjYXRjaCB7XG4gICAgfVxuICAgIHJldHVybiAhYyAmJiB0eXBlb2YgcHJvY2VzcyA8IFwidVwiICYmIFwiZW52XCIgaW4gcHJvY2VzcyAmJiAoYyA9IHByb2Nlc3MuZW52LkRFQlVHKSwgYztcbiAgfVxuICBmdW5jdGlvbiBwKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbG9jYWxTdG9yYWdlO1xuICAgIH0gY2F0Y2gge1xuICAgIH1cbiAgfVxuICBuLmV4cG9ydHMgPSBmZShyKTtcbiAgY29uc3QgeyBmb3JtYXR0ZXJzOiBnIH0gPSBuLmV4cG9ydHM7XG4gIGcuaiA9IGZ1bmN0aW9uKGMpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGMpO1xuICAgIH0gY2F0Y2ggKHUpIHtcbiAgICAgIHJldHVybiBcIltVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiBcIiArIHUubWVzc2FnZTtcbiAgICB9XG4gIH07XG59KShELCBELmV4cG9ydHMpO1xudmFyIENlID0gRC5leHBvcnRzO1xuY29uc3QgUSA9IC8qIEBfX1BVUkVfXyAqLyB1ZShDZSksIHBlID0gUShcImVsZWN0cm9uLXRycGM6bWFpbjpoYW5kbGVJUENNZXNzYWdlXCIpO1xuYXN5bmMgZnVuY3Rpb24gZ2Uoe1xuICByb3V0ZXI6IG4sXG4gIGNyZWF0ZUNvbnRleHQ6IHIsXG4gIGludGVybmFsSWQ6IGUsXG4gIG1lc3NhZ2U6IGksXG4gIGV2ZW50OiBhLFxuICBzdWJzY3JpcHRpb25zOiBDXG59KSB7XG4gIGlmIChpLm1ldGhvZCA9PT0gXCJzdWJzY3JpcHRpb24uc3RvcFwiKSB7XG4gICAgY29uc3QgZCA9IEMuZ2V0KGUpO1xuICAgIGlmICghZClcbiAgICAgIHJldHVybjtcbiAgICBkLnVuc3Vic2NyaWJlKCksIEMuZGVsZXRlKGUpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB7IHR5cGU6IHAsIGlucHV0OiBnLCBwYXRoOiBjLCBpZDogdSB9ID0gaS5vcGVyYXRpb24sIHQgPSBnID8gbi5fZGVmLl9jb25maWcudHJhbnNmb3JtZXIuaW5wdXQuZGVzZXJpYWxpemUoZykgOiB2b2lkIDAsIG8gPSBhd2FpdCAociA9PSBudWxsID8gdm9pZCAwIDogcih7IGV2ZW50OiBhIH0pKSA/PyB7fSwgcyA9IChkKSA9PiB7XG4gICAgYS5zZW5kZXIuaXNEZXN0cm95ZWQoKSB8fCBhLnJlcGx5KFQsIGNlKG4uX2RlZi5fY29uZmlnLCBkKSk7XG4gIH07XG4gIHRyeSB7XG4gICAgY29uc3QgZCA9IGF3YWl0IHNlKHtcbiAgICAgIGN0eDogbyxcbiAgICAgIHBhdGg6IGMsXG4gICAgICBwcm9jZWR1cmVzOiBuLl9kZWYucHJvY2VkdXJlcyxcbiAgICAgIHJhd0lucHV0OiB0LFxuICAgICAgdHlwZTogcFxuICAgIH0pO1xuICAgIGlmIChwICE9PSBcInN1YnNjcmlwdGlvblwiKSB7XG4gICAgICBzKHtcbiAgICAgICAgaWQ6IHUsXG4gICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgIHR5cGU6IFwiZGF0YVwiLFxuICAgICAgICAgIGRhdGE6IGRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmICghaWUoZCkpXG4gICAgICB0aHJvdyBuZXcgSSh7XG4gICAgICAgIG1lc3NhZ2U6IGBTdWJzY3JpcHRpb24gJHtjfSBkaWQgbm90IHJldHVybiBhbiBvYnNlcnZhYmxlYCxcbiAgICAgICAgY29kZTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIlxuICAgICAgfSk7XG4gICAgY29uc3QgaCA9IGQuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQobCkge1xuICAgICAgICBzKHtcbiAgICAgICAgICBpZDogdSxcbiAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgIHR5cGU6IFwiZGF0YVwiLFxuICAgICAgICAgICAgZGF0YTogbFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZXJyb3IobCkge1xuICAgICAgICBjb25zdCBmID0gaihsKTtcbiAgICAgICAgcyh7XG4gICAgICAgICAgaWQ6IHUsXG4gICAgICAgICAgZXJyb3I6IG4uZ2V0RXJyb3JTaGFwZSh7XG4gICAgICAgICAgICBlcnJvcjogZixcbiAgICAgICAgICAgIHR5cGU6IHAsXG4gICAgICAgICAgICBwYXRoOiBjLFxuICAgICAgICAgICAgaW5wdXQ6IHQsXG4gICAgICAgICAgICBjdHg6IG9cbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBjb21wbGV0ZSgpIHtcbiAgICAgICAgcyh7XG4gICAgICAgICAgaWQ6IHUsXG4gICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICB0eXBlOiBcInN0b3BwZWRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcGUoXCJDcmVhdGluZyBzdWJzY3JpcHRpb25cIiwgZSksIEMuc2V0KGUsIGgpO1xuICB9IGNhdGNoIChkKSB7XG4gICAgY29uc3QgaCA9IGooZCk7XG4gICAgcmV0dXJuIHMoe1xuICAgICAgaWQ6IHUsXG4gICAgICBlcnJvcjogbi5nZXRFcnJvclNoYXBlKHtcbiAgICAgICAgZXJyb3I6IGgsXG4gICAgICAgIHR5cGU6IHAsXG4gICAgICAgIHBhdGg6IGMsXG4gICAgICAgIGlucHV0OiB0LFxuICAgICAgICBjdHg6IG9cbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IHkgPSBRKFwiZWxlY3Ryb24tdHJwYzptYWluOklQQ0hhbmRsZXJcIiksIGhlID0gKG4sIHIpID0+IHtcbiAgY29uc3QgZSA9IHIubWV0aG9kID09PSBcInJlcXVlc3RcIiA/IHIub3BlcmF0aW9uLmlkIDogci5pZDtcbiAgcmV0dXJuIGAke24uc2VuZGVyLmlkfS0ke24uc2VuZGVyRnJhbWUucm91dGluZ0lkfToke2V9YDtcbn07XG52YXIgdywgRSwgUiwgTSwgTiwgWjtcbmNsYXNzIGJlIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGNyZWF0ZUNvbnRleHQ6IHIsXG4gICAgcm91dGVyOiBlLFxuICAgIHdpbmRvd3M6IGkgPSBbXVxuICB9KSB7XG4gICAgbSh0aGlzLCBSKTtcbiAgICBtKHRoaXMsIE4pO1xuICAgIG0odGhpcywgdywgW10pO1xuICAgIG0odGhpcywgRSwgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gICAgaS5mb3JFYWNoKChhKSA9PiB0aGlzLmF0dGFjaFdpbmRvdyhhKSksIGVlLm9uKFQsIChhLCBDKSA9PiB7XG4gICAgICBnZSh7XG4gICAgICAgIHJvdXRlcjogZSxcbiAgICAgICAgY3JlYXRlQ29udGV4dDogcixcbiAgICAgICAgaW50ZXJuYWxJZDogaGUoYSwgQyksXG4gICAgICAgIGV2ZW50OiBhLFxuICAgICAgICBtZXNzYWdlOiBDLFxuICAgICAgICBzdWJzY3JpcHRpb25zOiBGKHRoaXMsIEUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBhdHRhY2hXaW5kb3cocikge1xuICAgIEYodGhpcywgdykuaW5jbHVkZXMocikgfHwgKHkoXCJBdHRhY2hpbmcgd2luZG93XCIsIHIuaWQpLCBGKHRoaXMsIHcpLnB1c2gociksIHYodGhpcywgTiwgWikuY2FsbCh0aGlzLCByKSk7XG4gIH1cbiAgZGV0YWNoV2luZG93KHIpIHtcbiAgICB5KFwiRGV0YWNoaW5nIHdpbmRvd1wiLCByLmlkKSwgTCh0aGlzLCB3LCBGKHRoaXMsIHcpLmZpbHRlcigoZSkgPT4gZSAhPT0gcikpLCB2KHRoaXMsIFIsIE0pLmNhbGwodGhpcywgeyB3ZWJDb250ZW50c0lkOiByLndlYkNvbnRlbnRzLmlkIH0pO1xuICB9XG59XG53ID0gbmV3IFdlYWtNYXAoKSwgRSA9IG5ldyBXZWFrTWFwKCksIFIgPSBuZXcgV2Vha1NldCgpLCBNID0gZnVuY3Rpb24oe1xuICB3ZWJDb250ZW50c0lkOiByLFxuICBmcmFtZVJvdXRpbmdJZDogZVxufSkge1xuICBmb3IgKGNvbnN0IFtpLCBhXSBvZiBGKHRoaXMsIEUpLmVudHJpZXMoKSlcbiAgICBpLnN0YXJ0c1dpdGgoYCR7cn0tJHtlID8/IFwiXCJ9YCkgJiYgKHkoXCJDbG9zaW5nIHN1YnNjcmlwdGlvblwiLCBpKSwgYS51bnN1YnNjcmliZSgpLCBGKHRoaXMsIEUpLmRlbGV0ZShpKSk7XG59LCBOID0gbmV3IFdlYWtTZXQoKSwgWiA9IGZ1bmN0aW9uKHIpIHtcbiAgci53ZWJDb250ZW50cy5vbihcImRpZC1zdGFydC1uYXZpZ2F0aW9uXCIsICh7IGZyYW1lOiBlIH0pID0+IHtcbiAgICB5KFxuICAgICAgXCJIYW5kbGluZyB3ZWJDb250ZW50cyBgZGlkLXN0YXJ0LW5hdmlnYXRpb25gIGV2ZW50XCIsXG4gICAgICBgd2ViQ29udGVudHNJZDogJHtyLndlYkNvbnRlbnRzLmlkfWAsXG4gICAgICBgZnJhbWVSb3V0aW5nSWQ6ICR7ZS5yb3V0aW5nSWR9YFxuICAgICksIHYodGhpcywgUiwgTSkuY2FsbCh0aGlzLCB7XG4gICAgICB3ZWJDb250ZW50c0lkOiByLndlYkNvbnRlbnRzLmlkLFxuICAgICAgZnJhbWVSb3V0aW5nSWQ6IGUucm91dGluZ0lkXG4gICAgfSk7XG4gIH0pLCByLndlYkNvbnRlbnRzLm9uKFwiZGVzdHJveWVkXCIsICgpID0+IHtcbiAgICB5KFwiSGFuZGxpbmcgd2ViQ29udGVudHMgYGRlc3Ryb3llZGAgZXZlbnRcIiksIHRoaXMuZGV0YWNoV2luZG93KHIpO1xuICB9KTtcbn07XG5jb25zdCBtZSA9ICh7XG4gIGNyZWF0ZUNvbnRleHQ6IG4sXG4gIHJvdXRlcjogcixcbiAgd2luZG93czogZSA9IFtdXG59KSA9PiBuZXcgYmUoeyBjcmVhdGVDb250ZXh0OiBuLCByb3V0ZXI6IHIsIHdpbmRvd3M6IGUgfSksIHllID0gKCkgPT4ge1xuICBjb25zdCBuID0ge1xuICAgIHNlbmRNZXNzYWdlOiAocikgPT4gVS5zZW5kKFQsIHIpLFxuICAgIG9uTWVzc2FnZTogKHIpID0+IFUub24oVCwgKGUsIGkpID0+IHIoaSkpXG4gIH07XG4gIHJlLmV4cG9zZUluTWFpbldvcmxkKFwiZWxlY3Ryb25UUlBDXCIsIG4pO1xufTtcbmV4cG9ydCB7XG4gIFQgYXMgRUxFQ1RST05fVFJQQ19DSEFOTkVMLFxuICBtZSBhcyBjcmVhdGVJUENIYW5kbGVyLFxuICB5ZSBhcyBleHBvc2VFbGVjdHJvblRSUENcbn07XG4iLCJpbXBvcnQgeyBleHBvc2VFbGVjdHJvblRSUEMgfSBmcm9tIFwiZWxlY3Ryb24tdHJwYy9tYWluXCI7XG5wcm9jZXNzLm9uY2UoXCJsb2FkZWRcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGV4cG9zZUVsZWN0cm9uVFJQQygpO1xufSk7XG4iXSwibmFtZXMiOlsiVSIsInJlIiwiZXhwb3NlRWxlY3Ryb25UUlBDIl0sIm1hcHBpbmdzIjoiOzs7QUFXQSxNQUFNLElBQUk7QUE2QlYsU0FBUyxFQUFFLEdBQUc7QUFDTixRQUFBLElBQTJCLHVCQUFBLE9BQU8sSUFBSTtBQUM1QyxhQUFXLEtBQUssR0FBRztBQUNYLFVBQUEsSUFBSSxFQUFFLENBQUM7QUFDYixNQUFFLENBQUMsSUFBSTtBQUFBLEVBQ1Q7QUFDTyxTQUFBO0FBQ1Q7QUFDQSxNQUFNLElBQUk7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1IsYUFBYTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBSWIsYUFBYTtBQUFBO0FBQUEsRUFFYix1QkFBdUI7QUFBQSxFQUN2QixpQkFBaUI7QUFBQTtBQUFBLEVBRWpCLGNBQWM7QUFBQSxFQUNkLFdBQVc7QUFBQSxFQUNYLFdBQVc7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QUFDWCxZQUFNLElBQUksTUFBSSxRQUFRLEtBQUssdUlBQXVJO0FBQUEsSUFBQTtBQUFBLEVBQ3BLLEdBQ0ksR0FBQSxFQUFFLFNBQVM7QUFBQSxJQUNmO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsRUFBQTtBQUVGLFdBQVMsSUFBSTtBQUNYLFdBQU8sT0FBTyxTQUFTLE9BQU8sT0FBTyxZQUFZLE9B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
