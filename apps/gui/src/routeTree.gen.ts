/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ProjectsImport } from "./routes/projects";
import { Route as IndexImport } from "./routes/index";
import { Route as TowerGeometriesIndexImport } from "./routes/tower-geometries/index";
import { Route as ProjectsIndexImport } from "./routes/projects/index";
import { Route as ConductorTypesIndexImport } from "./routes/conductor-types/index";
import { Route as TowerGeometriesNewImport } from "./routes/tower-geometries/new";
import { Route as ProjectsNewImport } from "./routes/projects/new";
import { Route as ConductorTypesNewImport } from "./routes/conductor-types/new";
import { Route as TowerGeometriesGeometryIdLayoutImport } from "./routes/tower-geometries/$geometryId/_layout";
import { Route as ProjectsProjectIdViewProjectPageImport } from "./routes/projects/$projectId/_viewProjectPage";
import { Route as ConductorTypesTypeIdLayoutImport } from "./routes/conductor-types/$typeId/_layout";
import { Route as TowerGeometriesGeometryIdLayoutIndexImport } from "./routes/tower-geometries/$geometryId/_layout/index";
import { Route as ProjectsProjectIdViewProjectPageIndexImport } from "./routes/projects/$projectId/_viewProjectPage/index";
import { Route as ConductorTypesTypeIdLayoutIndexImport } from "./routes/conductor-types/$typeId/_layout/index";
import { Route as TowerGeometriesGeometryIdLayoutConductorsImport } from "./routes/tower-geometries/$geometryId/_layout/conductors";
import { Route as ProjectsProjectIdSourcesprojectCrumbImport } from "./routes/projects/$projectId/sources_/_projectCrumb";
import { Route as ProjectsProjectIdLinesprojectCrumbImport } from "./routes/projects/$projectId/lines_/_projectCrumb";
import { Route as ProjectsProjectIdViewProjectPageSourcesImport } from "./routes/projects/$projectId/_viewProjectPage/sources";
import { Route as ProjectsProjectIdViewProjectPageResultsImport } from "./routes/projects/$projectId/_viewProjectPage/results";
import { Route as ProjectsProjectIdViewProjectPageLinesImport } from "./routes/projects/$projectId/_viewProjectPage/lines";
import { Route as ProjectsProjectIdViewProjectPageDiagramImport } from "./routes/projects/$projectId/_viewProjectPage/diagram";
import { Route as ConductorTypesTypeIdLayoutPropertiesImport } from "./routes/conductor-types/$typeId/_layout/properties";
import { Route as ProjectsProjectIdSourcesprojectCrumbNewImport } from "./routes/projects/$projectId/sources_/_projectCrumb/new";
import { Route as ProjectsProjectIdLinesprojectCrumbNewImport } from "./routes/projects/$projectId/lines_/_projectCrumb/new";
import { Route as ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceImport } from "./routes/projects/$projectId/sources_/_projectCrumb/$sourceId/_viewSource";
import { Route as ProjectsProjectIdLinesprojectCrumbLineIdViewLineImport } from "./routes/projects/$projectId/lines_/_projectCrumb/$lineId/_viewLine";
import { Route as ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceIndexImport } from "./routes/projects/$projectId/sources_/_projectCrumb/$sourceId/_viewSource/index";
import { Route as ProjectsProjectIdLinesprojectCrumbLineIdViewLineIndexImport } from "./routes/projects/$projectId/lines_/_projectCrumb/$lineId/_viewLine/index";
import { Route as ProjectsProjectIdLinesprojectCrumbLineIdTowerIdIndexImport } from "./routes/projects/$projectId/lines_/_projectCrumb/$lineId/$towerId_/index";
import { Route as ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceSequenceImport } from "./routes/projects/$projectId/sources_/_projectCrumb/$sourceId/_viewSource/sequence";
import { Route as ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceElectricalImport } from "./routes/projects/$projectId/sources_/_projectCrumb/$sourceId/_viewSource/electrical";
import { Route as ProjectsProjectIdLinesprojectCrumbLineIdViewLineTowersImport } from "./routes/projects/$projectId/lines_/_projectCrumb/$lineId/_viewLine/towers";
import { Route as ProjectsProjectIdLinesprojectCrumbLineIdViewLineConductorsImport } from "./routes/projects/$projectId/lines_/_projectCrumb/$lineId/_viewLine/conductors";

// Create Virtual Routes

const TowerGeometriesGeometryIdImport = createFileRoute(
    "/tower-geometries/$geometryId"
)();
const ProjectsProjectIdImport = createFileRoute("/projects/$projectId")();
const ConductorTypesTypeIdImport = createFileRoute(
    "/conductor-types/$typeId"
)();
const ProjectsProjectIdSourcesImport = createFileRoute(
    "/projects/$projectId/sources"
)();
const ProjectsProjectIdLinesImport = createFileRoute(
    "/projects/$projectId/lines"
)();
const ProjectsProjectIdSourcesprojectCrumbSourceIdImport = createFileRoute(
    "/projects/$projectId/sources/_projectCrumb/$sourceId"
)();
const ProjectsProjectIdLinesprojectCrumbLineIdImport = createFileRoute(
    "/projects/$projectId/lines/_projectCrumb/$lineId"
)();

// Create/Update Routes

const ProjectsRoute = ProjectsImport.update({
    path: "/projects",
    getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
    path: "/",
    getParentRoute: () => rootRoute,
} as any);

const TowerGeometriesGeometryIdRoute = TowerGeometriesGeometryIdImport.update({
    path: "/tower-geometries/$geometryId",
    getParentRoute: () => rootRoute,
} as any);

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
    path: "/$projectId",
    getParentRoute: () => ProjectsRoute,
} as any);

const ConductorTypesTypeIdRoute = ConductorTypesTypeIdImport.update({
    path: "/conductor-types/$typeId",
    getParentRoute: () => rootRoute,
} as any);

const TowerGeometriesIndexRoute = TowerGeometriesIndexImport.update({
    path: "/tower-geometries/",
    getParentRoute: () => rootRoute,
} as any);

const ProjectsIndexRoute = ProjectsIndexImport.update({
    path: "/",
    getParentRoute: () => ProjectsRoute,
} as any);

const ConductorTypesIndexRoute = ConductorTypesIndexImport.update({
    path: "/conductor-types/",
    getParentRoute: () => rootRoute,
} as any);

const TowerGeometriesNewRoute = TowerGeometriesNewImport.update({
    path: "/tower-geometries/new",
    getParentRoute: () => rootRoute,
} as any);

const ProjectsNewRoute = ProjectsNewImport.update({
    path: "/new",
    getParentRoute: () => ProjectsRoute,
} as any);

const ConductorTypesNewRoute = ConductorTypesNewImport.update({
    path: "/conductor-types/new",
    getParentRoute: () => rootRoute,
} as any);

const ProjectsProjectIdSourcesRoute = ProjectsProjectIdSourcesImport.update({
    path: "/sources",
    getParentRoute: () => ProjectsProjectIdRoute,
} as any);

const ProjectsProjectIdLinesRoute = ProjectsProjectIdLinesImport.update({
    path: "/lines",
    getParentRoute: () => ProjectsProjectIdRoute,
} as any);

const TowerGeometriesGeometryIdLayoutRoute =
    TowerGeometriesGeometryIdLayoutImport.update({
        id: "/_layout",
        getParentRoute: () => TowerGeometriesGeometryIdRoute,
    } as any);

const ProjectsProjectIdViewProjectPageRoute =
    ProjectsProjectIdViewProjectPageImport.update({
        id: "/_viewProjectPage",
        getParentRoute: () => ProjectsProjectIdRoute,
    } as any);

const ConductorTypesTypeIdLayoutRoute = ConductorTypesTypeIdLayoutImport.update(
    {
        id: "/_layout",
        getParentRoute: () => ConductorTypesTypeIdRoute,
    } as any
);

const TowerGeometriesGeometryIdLayoutIndexRoute =
    TowerGeometriesGeometryIdLayoutIndexImport.update({
        path: "/",
        getParentRoute: () => TowerGeometriesGeometryIdLayoutRoute,
    } as any);

const ProjectsProjectIdViewProjectPageIndexRoute =
    ProjectsProjectIdViewProjectPageIndexImport.update({
        path: "/",
        getParentRoute: () => ProjectsProjectIdViewProjectPageRoute,
    } as any);

const ConductorTypesTypeIdLayoutIndexRoute =
    ConductorTypesTypeIdLayoutIndexImport.update({
        path: "/",
        getParentRoute: () => ConductorTypesTypeIdLayoutRoute,
    } as any);

const TowerGeometriesGeometryIdLayoutConductorsRoute =
    TowerGeometriesGeometryIdLayoutConductorsImport.update({
        path: "/conductors",
        getParentRoute: () => TowerGeometriesGeometryIdLayoutRoute,
    } as any);

const ProjectsProjectIdSourcesprojectCrumbRoute =
    ProjectsProjectIdSourcesprojectCrumbImport.update({
        id: "/_projectCrumb",
        getParentRoute: () => ProjectsProjectIdSourcesRoute,
    } as any);

const ProjectsProjectIdLinesprojectCrumbRoute =
    ProjectsProjectIdLinesprojectCrumbImport.update({
        id: "/_projectCrumb",
        getParentRoute: () => ProjectsProjectIdLinesRoute,
    } as any);

const ProjectsProjectIdViewProjectPageSourcesRoute =
    ProjectsProjectIdViewProjectPageSourcesImport.update({
        path: "/sources",
        getParentRoute: () => ProjectsProjectIdViewProjectPageRoute,
    } as any);

const ProjectsProjectIdViewProjectPageResultsRoute =
    ProjectsProjectIdViewProjectPageResultsImport.update({
        path: "/results",
        getParentRoute: () => ProjectsProjectIdViewProjectPageRoute,
    } as any);

const ProjectsProjectIdViewProjectPageLinesRoute =
    ProjectsProjectIdViewProjectPageLinesImport.update({
        path: "/lines",
        getParentRoute: () => ProjectsProjectIdViewProjectPageRoute,
    } as any);

const ProjectsProjectIdViewProjectPageDiagramRoute =
    ProjectsProjectIdViewProjectPageDiagramImport.update({
        path: "/diagram",
        getParentRoute: () => ProjectsProjectIdViewProjectPageRoute,
    } as any);

const ConductorTypesTypeIdLayoutPropertiesRoute =
    ConductorTypesTypeIdLayoutPropertiesImport.update({
        path: "/properties",
        getParentRoute: () => ConductorTypesTypeIdLayoutRoute,
    } as any);

const ProjectsProjectIdSourcesprojectCrumbSourceIdRoute =
    ProjectsProjectIdSourcesprojectCrumbSourceIdImport.update({
        path: "/$sourceId",
        getParentRoute: () => ProjectsProjectIdSourcesprojectCrumbRoute,
    } as any);

const ProjectsProjectIdLinesprojectCrumbLineIdRoute =
    ProjectsProjectIdLinesprojectCrumbLineIdImport.update({
        path: "/$lineId",
        getParentRoute: () => ProjectsProjectIdLinesprojectCrumbRoute,
    } as any);

const ProjectsProjectIdSourcesprojectCrumbNewRoute =
    ProjectsProjectIdSourcesprojectCrumbNewImport.update({
        path: "/new",
        getParentRoute: () => ProjectsProjectIdSourcesprojectCrumbRoute,
    } as any);

const ProjectsProjectIdLinesprojectCrumbNewRoute =
    ProjectsProjectIdLinesprojectCrumbNewImport.update({
        path: "/new",
        getParentRoute: () => ProjectsProjectIdLinesprojectCrumbRoute,
    } as any);

const ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceRoute =
    ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceImport.update({
        id: "/_viewSource",
        getParentRoute: () => ProjectsProjectIdSourcesprojectCrumbSourceIdRoute,
    } as any);

const ProjectsProjectIdLinesprojectCrumbLineIdViewLineRoute =
    ProjectsProjectIdLinesprojectCrumbLineIdViewLineImport.update({
        id: "/_viewLine",
        getParentRoute: () => ProjectsProjectIdLinesprojectCrumbLineIdRoute,
    } as any);

const ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceIndexRoute =
    ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceIndexImport.update({
        path: "/",
        getParentRoute: () =>
            ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceRoute,
    } as any);

const ProjectsProjectIdLinesprojectCrumbLineIdViewLineIndexRoute =
    ProjectsProjectIdLinesprojectCrumbLineIdViewLineIndexImport.update({
        path: "/",
        getParentRoute: () =>
            ProjectsProjectIdLinesprojectCrumbLineIdViewLineRoute,
    } as any);

const ProjectsProjectIdLinesprojectCrumbLineIdTowerIdIndexRoute =
    ProjectsProjectIdLinesprojectCrumbLineIdTowerIdIndexImport.update({
        path: "/$towerId/",
        getParentRoute: () => ProjectsProjectIdLinesprojectCrumbLineIdRoute,
    } as any);

const ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceSequenceRoute =
    ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceSequenceImport.update(
        {
            path: "/sequence",
            getParentRoute: () =>
                ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceRoute,
        } as any
    );

const ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceElectricalRoute =
    ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceElectricalImport.update(
        {
            path: "/electrical",
            getParentRoute: () =>
                ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceRoute,
        } as any
    );

const ProjectsProjectIdLinesprojectCrumbLineIdViewLineTowersRoute =
    ProjectsProjectIdLinesprojectCrumbLineIdViewLineTowersImport.update({
        path: "/towers",
        getParentRoute: () =>
            ProjectsProjectIdLinesprojectCrumbLineIdViewLineRoute,
    } as any);

const ProjectsProjectIdLinesprojectCrumbLineIdViewLineConductorsRoute =
    ProjectsProjectIdLinesprojectCrumbLineIdViewLineConductorsImport.update({
        path: "/conductors",
        getParentRoute: () =>
            ProjectsProjectIdLinesprojectCrumbLineIdViewLineRoute,
    } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            preLoaderRoute: typeof IndexImport;
            parentRoute: typeof rootRoute;
        };
        "/projects": {
            preLoaderRoute: typeof ProjectsImport;
            parentRoute: typeof rootRoute;
        };
        "/conductor-types/new": {
            preLoaderRoute: typeof ConductorTypesNewImport;
            parentRoute: typeof rootRoute;
        };
        "/projects/new": {
            preLoaderRoute: typeof ProjectsNewImport;
            parentRoute: typeof ProjectsImport;
        };
        "/tower-geometries/new": {
            preLoaderRoute: typeof TowerGeometriesNewImport;
            parentRoute: typeof rootRoute;
        };
        "/conductor-types/": {
            preLoaderRoute: typeof ConductorTypesIndexImport;
            parentRoute: typeof rootRoute;
        };
        "/projects/": {
            preLoaderRoute: typeof ProjectsIndexImport;
            parentRoute: typeof ProjectsImport;
        };
        "/tower-geometries/": {
            preLoaderRoute: typeof TowerGeometriesIndexImport;
            parentRoute: typeof rootRoute;
        };
        "/conductor-types/$typeId": {
            preLoaderRoute: typeof ConductorTypesTypeIdImport;
            parentRoute: typeof rootRoute;
        };
        "/conductor-types/$typeId/_layout": {
            preLoaderRoute: typeof ConductorTypesTypeIdLayoutImport;
            parentRoute: typeof ConductorTypesTypeIdRoute;
        };
        "/projects/$projectId": {
            preLoaderRoute: typeof ProjectsProjectIdImport;
            parentRoute: typeof ProjectsImport;
        };
        "/projects/$projectId/_viewProjectPage": {
            preLoaderRoute: typeof ProjectsProjectIdViewProjectPageImport;
            parentRoute: typeof ProjectsProjectIdRoute;
        };
        "/tower-geometries/$geometryId": {
            preLoaderRoute: typeof TowerGeometriesGeometryIdImport;
            parentRoute: typeof rootRoute;
        };
        "/tower-geometries/$geometryId/_layout": {
            preLoaderRoute: typeof TowerGeometriesGeometryIdLayoutImport;
            parentRoute: typeof TowerGeometriesGeometryIdRoute;
        };
        "/conductor-types/$typeId/_layout/properties": {
            preLoaderRoute: typeof ConductorTypesTypeIdLayoutPropertiesImport;
            parentRoute: typeof ConductorTypesTypeIdLayoutImport;
        };
        "/projects/$projectId/_viewProjectPage/diagram": {
            preLoaderRoute: typeof ProjectsProjectIdViewProjectPageDiagramImport;
            parentRoute: typeof ProjectsProjectIdViewProjectPageImport;
        };
        "/projects/$projectId/_viewProjectPage/lines": {
            preLoaderRoute: typeof ProjectsProjectIdViewProjectPageLinesImport;
            parentRoute: typeof ProjectsProjectIdViewProjectPageImport;
        };
        "/projects/$projectId/_viewProjectPage/results": {
            preLoaderRoute: typeof ProjectsProjectIdViewProjectPageResultsImport;
            parentRoute: typeof ProjectsProjectIdViewProjectPageImport;
        };
        "/projects/$projectId/_viewProjectPage/sources": {
            preLoaderRoute: typeof ProjectsProjectIdViewProjectPageSourcesImport;
            parentRoute: typeof ProjectsProjectIdViewProjectPageImport;
        };
        "/projects/$projectId/lines": {
            preLoaderRoute: typeof ProjectsProjectIdLinesImport;
            parentRoute: typeof ProjectsProjectIdImport;
        };
        "/projects/$projectId/lines/_projectCrumb": {
            preLoaderRoute: typeof ProjectsProjectIdLinesprojectCrumbImport;
            parentRoute: typeof ProjectsProjectIdLinesRoute;
        };
        "/projects/$projectId/sources": {
            preLoaderRoute: typeof ProjectsProjectIdSourcesImport;
            parentRoute: typeof ProjectsProjectIdImport;
        };
        "/projects/$projectId/sources/_projectCrumb": {
            preLoaderRoute: typeof ProjectsProjectIdSourcesprojectCrumbImport;
            parentRoute: typeof ProjectsProjectIdSourcesRoute;
        };
        "/tower-geometries/$geometryId/_layout/conductors": {
            preLoaderRoute: typeof TowerGeometriesGeometryIdLayoutConductorsImport;
            parentRoute: typeof TowerGeometriesGeometryIdLayoutImport;
        };
        "/conductor-types/$typeId/_layout/": {
            preLoaderRoute: typeof ConductorTypesTypeIdLayoutIndexImport;
            parentRoute: typeof ConductorTypesTypeIdLayoutImport;
        };
        "/projects/$projectId/_viewProjectPage/": {
            preLoaderRoute: typeof ProjectsProjectIdViewProjectPageIndexImport;
            parentRoute: typeof ProjectsProjectIdViewProjectPageImport;
        };
        "/tower-geometries/$geometryId/_layout/": {
            preLoaderRoute: typeof TowerGeometriesGeometryIdLayoutIndexImport;
            parentRoute: typeof TowerGeometriesGeometryIdLayoutImport;
        };
        "/projects/$projectId/lines/_projectCrumb/new": {
            preLoaderRoute: typeof ProjectsProjectIdLinesprojectCrumbNewImport;
            parentRoute: typeof ProjectsProjectIdLinesprojectCrumbImport;
        };
        "/projects/$projectId/sources/_projectCrumb/new": {
            preLoaderRoute: typeof ProjectsProjectIdSourcesprojectCrumbNewImport;
            parentRoute: typeof ProjectsProjectIdSourcesprojectCrumbImport;
        };
        "/projects/$projectId/lines/_projectCrumb/$lineId": {
            preLoaderRoute: typeof ProjectsProjectIdLinesprojectCrumbLineIdImport;
            parentRoute: typeof ProjectsProjectIdLinesprojectCrumbImport;
        };
        "/projects/$projectId/lines/_projectCrumb/$lineId/_viewLine": {
            preLoaderRoute: typeof ProjectsProjectIdLinesprojectCrumbLineIdViewLineImport;
            parentRoute: typeof ProjectsProjectIdLinesprojectCrumbLineIdRoute;
        };
        "/projects/$projectId/sources/_projectCrumb/$sourceId": {
            preLoaderRoute: typeof ProjectsProjectIdSourcesprojectCrumbSourceIdImport;
            parentRoute: typeof ProjectsProjectIdSourcesprojectCrumbImport;
        };
        "/projects/$projectId/sources/_projectCrumb/$sourceId/_viewSource": {
            preLoaderRoute: typeof ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceImport;
            parentRoute: typeof ProjectsProjectIdSourcesprojectCrumbSourceIdRoute;
        };
        "/projects/$projectId/lines/_projectCrumb/$lineId/_viewLine/conductors": {
            preLoaderRoute: typeof ProjectsProjectIdLinesprojectCrumbLineIdViewLineConductorsImport;
            parentRoute: typeof ProjectsProjectIdLinesprojectCrumbLineIdViewLineImport;
        };
        "/projects/$projectId/lines/_projectCrumb/$lineId/_viewLine/towers": {
            preLoaderRoute: typeof ProjectsProjectIdLinesprojectCrumbLineIdViewLineTowersImport;
            parentRoute: typeof ProjectsProjectIdLinesprojectCrumbLineIdViewLineImport;
        };
        "/projects/$projectId/sources/_projectCrumb/$sourceId/_viewSource/electrical": {
            preLoaderRoute: typeof ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceElectricalImport;
            parentRoute: typeof ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceImport;
        };
        "/projects/$projectId/sources/_projectCrumb/$sourceId/_viewSource/sequence": {
            preLoaderRoute: typeof ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceSequenceImport;
            parentRoute: typeof ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceImport;
        };
        "/projects/$projectId/lines/_projectCrumb/$lineId/$towerId/": {
            preLoaderRoute: typeof ProjectsProjectIdLinesprojectCrumbLineIdTowerIdIndexImport;
            parentRoute: typeof ProjectsProjectIdLinesprojectCrumbLineIdImport;
        };
        "/projects/$projectId/lines/_projectCrumb/$lineId/_viewLine/": {
            preLoaderRoute: typeof ProjectsProjectIdLinesprojectCrumbLineIdViewLineIndexImport;
            parentRoute: typeof ProjectsProjectIdLinesprojectCrumbLineIdViewLineImport;
        };
        "/projects/$projectId/sources/_projectCrumb/$sourceId/_viewSource/": {
            preLoaderRoute: typeof ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceIndexImport;
            parentRoute: typeof ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceImport;
        };
    }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
    IndexRoute,
    ProjectsRoute.addChildren([
        ProjectsNewRoute,
        ProjectsIndexRoute,
        ProjectsProjectIdRoute.addChildren([
            ProjectsProjectIdViewProjectPageRoute.addChildren([
                ProjectsProjectIdViewProjectPageDiagramRoute,
                ProjectsProjectIdViewProjectPageLinesRoute,
                ProjectsProjectIdViewProjectPageResultsRoute,
                ProjectsProjectIdViewProjectPageSourcesRoute,
                ProjectsProjectIdViewProjectPageIndexRoute,
            ]),
            ProjectsProjectIdLinesRoute.addChildren([
                ProjectsProjectIdLinesprojectCrumbRoute.addChildren([
                    ProjectsProjectIdLinesprojectCrumbNewRoute,
                    ProjectsProjectIdLinesprojectCrumbLineIdRoute.addChildren([
                        ProjectsProjectIdLinesprojectCrumbLineIdViewLineRoute.addChildren(
                            [
                                ProjectsProjectIdLinesprojectCrumbLineIdViewLineConductorsRoute,
                                ProjectsProjectIdLinesprojectCrumbLineIdViewLineTowersRoute,
                                ProjectsProjectIdLinesprojectCrumbLineIdViewLineIndexRoute,
                            ]
                        ),
                        ProjectsProjectIdLinesprojectCrumbLineIdTowerIdIndexRoute,
                    ]),
                ]),
            ]),
            ProjectsProjectIdSourcesRoute.addChildren([
                ProjectsProjectIdSourcesprojectCrumbRoute.addChildren([
                    ProjectsProjectIdSourcesprojectCrumbNewRoute,
                    ProjectsProjectIdSourcesprojectCrumbSourceIdRoute.addChildren(
                        [
                            ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceRoute.addChildren(
                                [
                                    ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceElectricalRoute,
                                    ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceSequenceRoute,
                                    ProjectsProjectIdSourcesprojectCrumbSourceIdViewSourceIndexRoute,
                                ]
                            ),
                        ]
                    ),
                ]),
            ]),
        ]),
    ]),
    ConductorTypesNewRoute,
    TowerGeometriesNewRoute,
    ConductorTypesIndexRoute,
    TowerGeometriesIndexRoute,
    ConductorTypesTypeIdRoute.addChildren([
        ConductorTypesTypeIdLayoutRoute.addChildren([
            ConductorTypesTypeIdLayoutPropertiesRoute,
            ConductorTypesTypeIdLayoutIndexRoute,
        ]),
    ]),
    TowerGeometriesGeometryIdRoute.addChildren([
        TowerGeometriesGeometryIdLayoutRoute.addChildren([
            TowerGeometriesGeometryIdLayoutConductorsRoute,
            TowerGeometriesGeometryIdLayoutIndexRoute,
        ]),
    ]),
]);

/* prettier-ignore-end */
